//code is made for annimations on DKINNOVATION LED PANEL SPEAKER
//Donovan Kitten made this code

#include <Adafruit_GFX.h>   // Core graphics library from ADAFRUIT
#include <RGBmatrixPanel.h> // Hardware-specific library
//#include <IRremote.h>


#define CLK 11 // USE THIS ON ARDUINO MEGA
#define OE   9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

const int  buttonPin = 2;    // the pin that the pushbutton is attached to
const int  buttonPin1 = 3; 
const int  buttonPin2 = 4;

// Variables will change:
int buttonPushCounter = 0;   // counter for the number of button presses
int buttonState = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button
int buttonPushCounter1 = 0;   // counter for the number of button presses
int buttonState1 = 0;         // current state of the button
int lastButtonState1 = 0;     // previous state of the button
int buttonPushCounter2 = 0;
int buttonState2 = 0;
int lastButtonState2 = 0;



void setup() {
  //initialize randum number generator
  randomSeed(analogRead(15));
  // initialize the button pin as a input:

  pinMode(buttonPin, INPUT);
  pinMode(buttonPin1, INPUT);
  pinMode(buttonPin2, INPUT);


  // initialize the LED as an output:
  buttonState = digitalRead(buttonPin);
  buttonState1 = digitalRead(buttonPin1);
  buttonState2 = digitalRead(buttonPin2);
  
      matrix.begin();
  matrix.fillScreen(matrix.Color444(1, 0, 1));

  // draw some text!
  matrix.setCursor(11, 1);  // start at top left, with one pixel of spacing
  matrix.setTextSize(1);   // size 1 == 8 pixels high

  // print each letter with a rainbow color
 
  matrix.setTextColor(matrix.Color444(0,12,9));
  matrix.print('D');
  matrix.setTextColor(matrix.Color444(0,12,11));
  matrix.print('K');


  matrix.setCursor(6, 9);  // next line
  matrix.setTextColor(matrix.Color444(0,14,8));
  matrix.print('I');
  matrix.setTextColor(matrix.Color444(0,8,14));
  matrix.print('n');
  matrix.setTextColor(matrix.Color444(0,0,14));
  matrix.print('n');
  matrix.setTextColor(matrix.Color444(0,5,10));
  matrix.print('.');
  } 

  

  
  //random numbers for colors
long randr;
long randg;
long randb;
   //randum numbers for fire dancing.
long randNumber1;
long randNumber2;
long randNumber3;

  //randum number for height of fire
long randNumberh;




void loop() {


  // read the pushbutton input pin:
  buttonState = digitalRead(buttonPin);

  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter++;
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
   lastButtonState = buttonState;
  // save the current state as the last state, for next time through the loop


  // turns on the LED every four button pushes by checking the modulo of the
  // button push counter. the modulo function gives you the remainder of the
  // division of two numbers:

  if (buttonPushCounter == 1) {
    buttonPushCounter1 = 0;
    buttonPushCounter2 = 0;
//crazy glitch animation
    randr = random(15);
    randg = random(15);
    randb = random(15);
    int i = randr;
    int o = randg;
    int p = randb;
    
  for(uint8_t x=0; x<32; x++) {
    for(uint8_t y=0; y<16; y++) {
      matrix.drawPixel(x, y, matrix.Color333(i, o, p));
      i++;
      if(i == 8) {
        i = 0;
        o++;
        if(o == 8) {
          o = 0;
          p++;
        }
      }
    }
  }
  }


    buttonState1 = digitalRead(buttonPin1);

  // compare the buttonState to its previous state
  if (buttonState1 != lastButtonState1) {
    // if the state has changed, increment the counter
    if (buttonState1 == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter1++;
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter1);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  //rainbow effect animation
   lastButtonState1 = buttonState1;
  if (buttonPushCounter1 == 1) {
    buttonPushCounter = 0;
    buttonPushCounter2 = 0;
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 7, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 7, 1));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 7, 3));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 7, 5));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 7, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 5, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 3, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 1, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 0, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 7, 1));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 7, 3));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 7, 5));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 7, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 5, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 3, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 1, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 0, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(1, 0, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 7, 3));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 7, 5));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 7, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 5, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 3, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 1, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 0, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(1, 0, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(3, 0, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 7, 5));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 7, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 5, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 3, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 1, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 0, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(1, 0, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(3, 0, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(5, 0, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 7, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 5, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 3, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 1, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 0, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(1, 1, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(3, 3, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(5, 5, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 0, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 5, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 3, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 1, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 0, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(1, 0, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(3, 0, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(5, 0, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 0, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(8, 0, 5));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 3, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 1, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 0, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(1, 0, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(3, 0, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(5, 0, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 0, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 0, 5));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 0, 3));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 1, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 0, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(1, 0, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(3, 0, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(5, 0, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 0, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 0, 5));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 0, 3));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 0, 1));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(0, 0, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(1, 0, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(3, 0, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(5, 0, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 0, 7));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 0, 5));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 0, 3));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 0, 1));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 0, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(1, 0, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(3, 0, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(5, 0, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 0, 7));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 0, 5));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 0, 3));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 0, 1));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 0, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 1, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(3, 0, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(5, 0, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 0, 7));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 0, 5));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 0, 3));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 0, 1));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 0, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 1, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 3, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(5, 0, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 0, 7));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 0, 5));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 0, 3));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 0, 1));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 0, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 1, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 3, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 5, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 0, 7));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 0, 5));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 0, 3));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 0, 1));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 0, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 1, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 3, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 5, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(7, 7, 0));
    delay(100);
    matrix.drawRect(1, 0, 32, 16, matrix.Color444(7, 0, 5));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 0, 3));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 0, 1));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 0, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 1, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 3, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 5, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(7, 7, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(5, 7, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 0, 3));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 0, 1));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 0, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 1, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 3, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 5, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(7, 7, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(5, 7, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(3, 7, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 0, 1));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 0, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 1, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 3, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 5, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(7, 7, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(5, 7, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(3, 7, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(1, 7, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 0, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 1, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 3, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 5, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(7, 7, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(5, 7, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(3, 7, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(1, 7, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 7, 0));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 1, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 3, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 5, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(7, 7, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(5, 7, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(3, 7, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(1, 7, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 7, 0));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 7, 1));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 3, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 5, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(7, 7, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(5, 7, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(3, 7, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(1, 7, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 7, 0));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 7, 1));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 7, 3));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 5, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(7, 7, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(5, 7, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(3, 7, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(1, 7, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 7, 0));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 7, 1));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 7, 3));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 7, 5));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(7, 7, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(5, 7, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(3, 7, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(1, 7, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 7, 0));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 7, 1));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 7, 3));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 7, 5));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 7, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(5, 7, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(3, 7, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(1, 7, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 7, 0));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 7, 1));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 7, 3));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 7, 5));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 7, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 5, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(3, 7, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(1, 7, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 7, 0));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 7, 1));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 7, 3));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 7, 5));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 7, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 5, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 3, 7));
    delay(100);
    matrix.drawRect(0, 0, 32, 16, matrix.Color444(1, 7, 0));
    matrix.drawRect(1, 1, 30, 14, matrix.Color444(0, 7, 0));
    matrix.drawRect(2, 2, 28, 12, matrix.Color444(0, 7, 1));
    matrix.drawRect(3, 3, 26, 10, matrix.Color444(0, 7, 3));
    matrix.drawRect(4, 4, 24, 8, matrix.Color444(0, 7, 5));
    matrix.drawRect(5, 5, 22, 6, matrix.Color444(0, 7, 7));
    matrix.drawRect(6, 6, 20, 4, matrix.Color444(0, 5, 7));
    matrix.drawRect(7, 7, 18, 2, matrix.Color444(0, 3, 7));
    matrix.drawRect(8, 8, 16, 0, matrix.Color444(0, 1, 7));
    delay(100);
  }
      


  
    buttonState2 = digitalRead(buttonPin2);

  // compare the buttonState to its previous state
  if (buttonState2 != lastButtonState2) {
    // if the state has changed, increment the counter
    if (buttonState2 == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter2++;
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter2);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
//fire dancing animation

   lastButtonState2 = buttonState2;
  if (buttonPushCounter2 == 1) {
    buttonPushCounter1 = 0;
    buttonPushCounter = 0;

    randNumber1 = random(6,15);
    randNumber2 = random(3,7);
    randNumber3 = random(6,15);
   int r=randNumber1;
   int g=randNumber2;
   int b=randNumber3;

  randNumberh = random(16);
  int h=randNumberh;

    matrix.fillScreen(matrix.Color444(r,0,b));
    matrix.drawLine(0,16,0,h, matrix.Color444(15,g+5,0));
    matrix.drawLine(1,16,1,h+2, matrix.Color444(15,g+4,0));
    matrix.drawLine(2,16,2,h-2, matrix.Color444(15,g+3,0));
    matrix.drawLine(3,16,3,h/2, matrix.Color444(15,g+2,0));
    matrix.drawLine(4,16,4,r, matrix.Color444(15,g+1,0));
    matrix.drawLine(5,16,5,b, matrix.Color444(13,g,0));
    matrix.drawLine(6,16,6,h-3, matrix.Color444(14,g,0));
    matrix.drawLine(7,16,7,h-1, matrix.Color444(15,g,0));
    matrix.drawLine(8,16,8,h+3, matrix.Color444(15,g,0));
    matrix.drawLine(9,16,9,r+2, matrix.Color444(15,g,0));
    matrix.drawLine(10,16,10,b-1, matrix.Color444(15,g-1,0));
    matrix.drawLine(11,16,11,h, matrix.Color444(15,g-1,0));
    matrix.drawLine(12,16,12,h+2, matrix.Color444(15,g-2,0));
    matrix.drawLine(13,16,13,h-3, matrix.Color444(15,g-2,0));
    matrix.drawLine(14,16,14,h+1, matrix.Color444(15,g-3,0));
    matrix.drawLine(15,16,15,r-4, matrix.Color444(15,g-3,0));
    matrix.drawLine(16,16,16,h+2, matrix.Color444(15,g-3,0));
    matrix.drawLine(17,16,17,b/2, matrix.Color444(15,g-3,0));
    matrix.drawLine(18,16,18,h-2, matrix.Color444(15,g-2,0));
    matrix.drawLine(19,16,19,h+1, matrix.Color444(15,g-2,0));
    matrix.drawLine(20,16,20,h-3, matrix.Color444(15,g-1,0));
    matrix.drawLine(21,16,21,h-1, matrix.Color444(15,g-1,0));
    matrix.drawLine(22,16,22,r/2, matrix.Color444(15,g,0));
    matrix.drawLine(23,16,23,h/3, matrix.Color444(15,g,0));
    matrix.drawLine(24,16,24,h+2, matrix.Color444(15,g,0));
    matrix.drawLine(25,16,25,h-3, matrix.Color444(14,g,0));
    matrix.drawLine(26,16,26,h+4, matrix.Color444(13,g,0));
    matrix.drawLine(27,16,27,r-1, matrix.Color444(15,g+1,0));
    matrix.drawLine(28,16,28,h+1, matrix.Color444(15,g+2,0));
    matrix.drawLine(29,16,29,r, matrix.Color444(15,g+3,0));
    matrix.drawLine(30,16,30,h+2, matrix.Color444(15,g+4,0));
    matrix.drawLine(31,16,31,h-2, matrix.Color444(15,g+5,0));
    delay(50);
    
}
}
